[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "match-list-processor"
version = "1.0.0"
description = "Match list processor for FOGIS referee management"
authors = [
    {name = "PitchConnect", email = "info@pitchconnect.com"}
]
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "requests",
    "python-dotenv",
    "pydantic",
    "typing-extensions"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "mypy>=1.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "pre-commit>=2.20.0",
    "coverage>=6.0.0",
    "psutil>=5.9.0"
]

[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=25",
    "--timeout=30",
    "--timeout-method=thread"
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests (max 30s timeout)",
    "e2e: End-to-end tests",
    "performance: Performance tests",
    "slow: Slow running tests",
    "comprehensive: Comprehensive test suite",
    "asyncio: Async tests",
    "critical: Critical tests that must pass for CI/CD",
    "legacy: Legacy tests for old architecture (expected to fail during transition)",
    "security: Security and vulnerability tests",
    "stress: Stress tests (high load/long duration)",
    "smoke: Smoke tests (quick validation)",
    "regression: Regression tests",
    "edge_case: Edge case tests",
    "mock_external: Tests that mock external services",
    "change_detection: Change detection specific tests",
    "api: API endpoint tests",
    "health: Health check tests"
]
timeout = 30

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src"]
known_third_party = ["pytest", "requests", "pydantic"]

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test
